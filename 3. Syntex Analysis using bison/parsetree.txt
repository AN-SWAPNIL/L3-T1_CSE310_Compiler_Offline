start : program	<Line: 1-10>
 program : program unit	<Line: 1-10>
  program : unit	<Line: 1-3>
   unit : func_definition	<Line: 1-3>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 1-3>
     type_specifier : INT	<Line: 1-1>
      INT : int	<Line: 1>
     ID : foo	<Line: 1>
     LPAREN : (	<Line: 1>
     parameter_list : parameter_list COMMA type_specifier ID	<Line: 1-1>
      parameter_list : parameter_list COMMA type_specifier ID	<Line: 1-1>
       parameter_list : type_specifier ID	<Line: 1-1>
        type_specifier : INT	<Line: 1-1>
         INT : int	<Line: 1>
        ID : x	<Line: 1>
       COMMA : ,	<Line: 1>
       type_specifier : INT	<Line: 1-1>
        INT : int	<Line: 1>
       ID : y	<Line: 1>
      COMMA : ,	<Line: 1>
      type_specifier : INT	<Line: 1-1>
       INT : int	<Line: 1>
      ID : z	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL	<Line: 1-3>
      LCURL : {	<Line: 1>
      statements : statement	<Line: 2-2>
       statement : RETURN expression SEMICOLON	<Line: 2-2>
        RETURN : return	<Line: 2>
        expression : logic_expression	<Line: 2-2>
         logic_expression : rel_expression	<Line: 2-2>
          rel_expression : simple_expression	<Line: 2-2>
           simple_expression : simple_expression ADDOP term	<Line: 2-2>
            simple_expression : simple_expression ADDOP term	<Line: 2-2>
             simple_expression : term	<Line: 2-2>
              term : unary_expression	<Line: 2-2>
               unary_expression : factor	<Line: 2-2>
                factor : variable	<Line: 2-2>
                 variable : ID	<Line: 2-2>
                  ID : x	<Line: 2>
             ADDOP : +	<Line: 2>
             term : unary_expression	<Line: 2-2>
              unary_expression : factor	<Line: 2-2>
               factor : variable	<Line: 2-2>
                variable : ID	<Line: 2-2>
                 ID : y	<Line: 2>
            ADDOP : +	<Line: 2>
            term : unary_expression	<Line: 2-2>
             unary_expression : factor	<Line: 2-2>
              factor : variable	<Line: 2-2>
               variable : ID	<Line: 2-2>
                ID : z	<Line: 2>
        SEMICOLON : ;	<Line: 2>
      RCURL : }	<Line: 3>
  unit : func_definition	<Line: 4-10>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement	<Line: 4-10>
    type_specifier : INT	<Line: 4-4>
     INT : int	<Line: 4>
    ID : main	<Line: 4>
    LPAREN : (	<Line: 4>
    RPAREN : )	<Line: 4>
    compound_statement : LCURL statements RCURL	<Line: 4-10>
     LCURL : {	<Line: 4>
     statements : statements statement	<Line: 5-9>
      statements : statements statement	<Line: 5-8>
       statements : statements statement	<Line: 5-7>
        statements : statements statement	<Line: 5-6>
         statements : statement	<Line: 5-5>
          statement : var_declaration	<Line: 5-5>
           var_declaration : type_specifier declaration_list SEMICOLON	<Line: 5-5>
            type_specifier : INT	<Line: 5-5>
             INT : int	<Line: 5>
            declaration_list : ID	<Line: 5-5>
             ID : i	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : expression_statement	<Line: 6-6>
          expression_statement : expression SEMICOLON	<Line: 6-6>
           expression : variable ASSIGNOP logic_expression	<Line: 6-6>
            variable : ID	<Line: 6-6>
             ID : foo	<Line: 6>
            ASSIGNOP : =	<Line: 6>
            logic_expression : rel_expression	<Line: 6-6>
             rel_expression : simple_expression	<Line: 6-6>
              simple_expression : term	<Line: 6-6>
               term : unary_expression	<Line: 6-6>
                unary_expression : factor	<Line: 6-6>
                 factor : CONST_INT	<Line: 6-6>
                  CONST_INT : 5	<Line: 6>
           SEMICOLON : ;	<Line: 6>
        statement : expression_statement	<Line: 7-7>
         expression_statement : expression SEMICOLON	<Line: 7-7>
          expression : logic_expression	<Line: 7-7>
           logic_expression : rel_expression	<Line: 7-7>
            rel_expression : simple_expression	<Line: 7-7>
             simple_expression : term	<Line: 7-7>
              term : unary_expression	<Line: 7-7>
               unary_expression : factor	<Line: 7-7>
                factor : ID LPAREN argument_list RPAREN	<Line: 7-7>
                 ID : i	<Line: 7>
                 LPAREN : (	<Line: 7>
                 argument_list : arguments	<Line: 7-7>
                  arguments : logic_expression	<Line: 7-7>
                   logic_expression : rel_expression	<Line: 7-7>
                    rel_expression : simple_expression	<Line: 7-7>
                     simple_expression : term	<Line: 7-7>
                      term : unary_expression	<Line: 7-7>
                       unary_expression : factor	<Line: 7-7>
                        factor : CONST_INT	<Line: 7-7>
                         CONST_INT : 9	<Line: 7>
                 RPAREN : )	<Line: 7>
          SEMICOLON : ;	<Line: 7>
       statement : expression_statement	<Line: 8-8>
        expression_statement : expression SEMICOLON	<Line: 8-8>
         expression : variable ASSIGNOP logic_expression	<Line: 8-8>
          variable : ID	<Line: 8-8>
           ID : i	<Line: 8>
          ASSIGNOP : =	<Line: 8>
          logic_expression : rel_expression	<Line: 8-8>
           rel_expression : simple_expression	<Line: 8-8>
            simple_expression : term	<Line: 8-8>
             term : term MULOP unary_expression	<Line: 8-8>
              term : unary_expression	<Line: 8-8>
               unary_expression : factor	<Line: 8-8>
                factor : CONST_INT	<Line: 8-8>
                 CONST_INT : 0	<Line: 8>
              MULOP : /	<Line: 8>
              unary_expression : factor	<Line: 8-8>
               factor : CONST_INT	<Line: 8-8>
                CONST_INT : 0	<Line: 8>
         SEMICOLON : ;	<Line: 8>
      statement : var_declaration	<Line: 9-9>
       var_declaration : type_specifier declaration_list SEMICOLON	<Line: 9-9>
        type_specifier : INT	<Line: 9-9>
         INT : int	<Line: 9>
        declaration_list : ID LSQUARE CONST_INT RSQUARE array_list	<Line: 9-9>
         ID : arr	<Line: 9>
         LSQUARE : [	<Line: 9>
         CONST_INT : 2	<Line: 9>
         RSQUARE : ]	<Line: 9>
         array : ASSIGNOP LCURL argument_list RCURL	<Line: 9-9>
          ASSIGNOP : =	<Line: 9>
          LCURL : {	<Line: 9>
          argument_list : arguments	<Line: 9-9>
           arguments : arguments COMMA logic_expression	<Line: 9-9>
            arguments : logic_expression	<Line: 9-9>
             logic_expression : rel_expression	<Line: 9-9>
              rel_expression : simple_expression	<Line: 9-9>
               simple_expression : term	<Line: 9-9>
                term : unary_expression	<Line: 9-9>
                 unary_expression : factor	<Line: 9-9>
                  factor : ID LPAREN argument_list RPAREN	<Line: 9-9>
                   ID : bar	<Line: 9>
                   LPAREN : (	<Line: 9>
                   argument_list : arguments	<Line: 9-9>
                    arguments : arguments COMMA logic_expression	<Line: 9-9>
                     arguments : arguments COMMA logic_expression	<Line: 9-9>
                      arguments : logic_expression	<Line: 9-9>
                       logic_expression : rel_expression	<Line: 9-9>
                        rel_expression : simple_expression	<Line: 9-9>
                         simple_expression : term	<Line: 9-9>
                          term : unary_expression	<Line: 9-9>
                           unary_expression : factor	<Line: 9-9>
                            factor : CONST_INT	<Line: 9-9>
                             CONST_INT : 1	<Line: 9>
                      COMMA : ,	<Line: 9>
                      logic_expression : rel_expression	<Line: 9-9>
                       rel_expression : simple_expression	<Line: 9-9>
                        simple_expression : term	<Line: 9-9>
                         term : unary_expression	<Line: 9-9>
                          unary_expression : factor	<Line: 9-9>
                           factor : CONST_INT	<Line: 9-9>
                            CONST_INT : 2	<Line: 9>
                     COMMA : ,	<Line: 9>
                     logic_expression : rel_expression	<Line: 9-9>
                      rel_expression : simple_expression	<Line: 9-9>
                       simple_expression : term	<Line: 9-9>
                        term : unary_expression	<Line: 9-9>
                         unary_expression : factor	<Line: 9-9>
                          factor : CONST_INT	<Line: 9-9>
                           CONST_INT : 3	<Line: 9>
                   RPAREN : )	<Line: 9>
            COMMA : ,	<Line: 9>
            logic_expression : rel_expression	<Line: 9-9>
             rel_expression : simple_expression	<Line: 9-9>
              simple_expression : simple_expression ADDOP term	<Line: 9-9>
               simple_expression : term	<Line: 9-9>
                term : unary_expression	<Line: 9-9>
                 unary_expression : factor	<Line: 9-9>
                  factor : variable	<Line: 9-9>
                   variable : ID	<Line: 9-9>
                    ID : i	<Line: 9>
               ADDOP : +	<Line: 9>
               term : unary_expression	<Line: 9-9>
                unary_expression : factor	<Line: 9-9>
                 factor : CONST_INT	<Line: 9-9>
                  CONST_INT : 2	<Line: 9>
        SEMICOLON : ;	<Line: 9>
     RCURL : }	<Line: 10>
