Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme i found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 3: Token <IF> Lexeme if found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <ID> Lexeme i found
Line# 3: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 3: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <LOGICOP> Lexeme || found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 3: Token <ID> Lexeme i found
Line# 3: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 3: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 3: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
Warning at line no 4 : indentation error
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 4: Token <CONST_INT> Lexeme 100 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
Line# 5: Token <ELSE> Lexeme else found
Warning at line no 6 : indentation error
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <CONST_INT> Lexeme 200 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 8: Token <IF> Lexeme if found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 8: Token <CONST_INT> Lexeme 20 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 8: Token <CONST_INT> Lexeme 30 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
Warning at line no 9 : indentation error
Line# 9: Token <ID> Lexeme i found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 9: Token <CONST_INT> Lexeme 300 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
Line# 10: Token <ELSE> Lexeme else found
Warning at line no 11 : indentation error
Line# 11: Token <ID> Lexeme i found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 11: Token <CONST_INT> Lexeme 400 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 13: Token <IF> Lexeme if found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 13: Token <CONST_INT> Lexeme 40 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 13: Token <CONST_INT> Lexeme 50 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
factor : LPAREN expression RPAREN
unary_expression : factor
term : unary_expression
Line# 13: Token <LOGICOP> Lexeme || found
simple_expression : term
rel_expression : simple_expression
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 13: Token <CONST_INT> Lexeme 60 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 13: Token <CONST_INT> Lexeme 70 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 13: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
factor : LPAREN expression RPAREN
unary_expression : factor
term : unary_expression
Line# 13: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
Warning at line no 14 : indentation error
Line# 14: Token <ID> Lexeme i found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 14: Token <CONST_INT> Lexeme 500 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
Line# 15: Token <ELSE> Lexeme else found
Warning at line no 16 : indentation error
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 16: Token <CONST_INT> Lexeme 600 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 17: Token <PRINTLN> Lexeme println found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <RPAREN> Lexeme ) found
Line# 17: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 19: Token <RETURN> Lexeme return found
Line# 19: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 19: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 20: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	7--> <i,INT> 
	ScopeTable# 1
	2--> <main,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total lines: 22
Total errors: 0
