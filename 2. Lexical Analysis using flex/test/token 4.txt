<VOID, void>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, x>
<COMMA, ,>
<ID, y>
<SEMICOLON, ;>
<ID, x>
<ASSIGNOP, =>
<ID, x>
<ADDOP, +>
<CONST_INT, 1>
<SEMICOLON, ;>
<ID, y>
<ASSIGNOP, =>
<ID, y>
<MULOP, *>
<CONST_INT, 2>
<SEMICOLON, ;>
<FLOAT, float>
<ID, f>
<SEMICOLON, ;>
<ID, f>
<ASSIGNOP, =>
<ID, f>
<ADDOP, ->
<CONST_FLOAT, 3.14>
<SEMICOLON, ;>
<ID, f>
<ASSIGNOP, =>
<ID, f>
<MULOP, *>
<CONST_FLOAT, 2.81E0>
<SEMICOLON, ;>
<ID, u>
<ASSIGNOP, =>
<ID, v>
<BITOP, <<>
<CONST_INT, 2>
<BITOP, >>>
<CONST_INT, 3>
<BITOP, ^>
<CONST_INT, 4>
<CHAR, char>
<ID, ch>
<ASSIGNOP, =>
<CONST_CHAR, z>
<SEMICOLON, ;>
<ID, ch>
<ASSIGNOP, =>
<CONST_CHAR, 	>
<SEMICOLON, ;>
<CHAR, char>
<ID, str>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, hello	world>
<SEMICOLON, ;>
<CHAR, char>
<ID, str2>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, Hello my friends from 
 there 	 also rem - " surprise " - for your good>
<SEMICOLON, ;>
<CHAR, char>
<ID, str>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING,  forgot to tell 4\2=2; >
<ID, hehe>
<INT, int>
<ID, anik>
<ASSIGNOP, =>
<CONST_INT, 1009099>
<SEMICOLON, ;>
<INT, int>
<ID, kabirBrothers>
<ASSIGNOP, =>
<SEMICOLON, ;>
<INT, int>
<ID, khilgaon>
<COMMA, ,>
<ID, malibah>
<SEMICOLON, ;>
<FLOAT, float>
<ID, suhrawardy>
<SEMICOLON, ;>
<ID, malibah>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<FLOAT, float>
<ID, t>
<ASSIGNOP, =>
<INT, int>
<ID, time>
<ASSIGNOP, =>
<CONST_INT, 3>
<SEMICOLON, ;>
<ID, bool>
<ID, Abid>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, time>
<RELOP, <>
<RPAREN, )>
<LCURL, {>
<CHAR, char>
<ID, char1>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, Abid not home ||>
<SEMICOLON, ;>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, %d>
<COMMA, ,>
<CHAR, char>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, itsBecameAnID>
<ID, printf>
<LPAREN, (>
<MULTI LINE STRING, The day	was	sunny>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
<DOUBLE, double>
<ID, solve>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<CHAR, char>
<ID, tias>
<ASSIGNOP, =>
<DOUBLE, double>
<ID, miraj>
<ASSIGNOP, =>
<SEMICOLON, ;>
<FLOAT, float>
<ID, home>
<ASSIGNOP, =>
<SEMICOLON, ;>
<FLOAT, float>
<ID, tf>
<ASSIGNOP, =>
<SEMICOLON, ;>
<INT, int>
<SEMICOLON, ;>
<CHAR, char>
<ASSIGNOP, =>
<SEMICOLON, ;>
<CHAR, char>
<ID, bruceWayne>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, rude>
<SEMICOLON, ;>
<CHAR, char>
<ID, _>
<ASSIGNOP, =>
<SEMICOLON, ;>
<CHAR, char>
<ID, a23a_>
<ASSIGNOP, =>
<CHAR, char>
<ID, ct>
<ASSIGNOP, =>
<CHAR, char>
<ID, golam>
<ASSIGNOP, =>
<SEMICOLON, ;>
<CHAR, char>
<ID, ____etaki__>
<ASSIGNOP, =>
<SEMICOLON, ;>
<CHAR, char>
<ID, janina>
<ASSIGNOP, =>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, jodiIsHoy>
<RPAREN, )>
<LCURL, {>
<ID, But>
<ID, kintu>
<ID, what>
<ID, ki>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, emni>
<RPAREN, )>
<LCURL, {>
<CHAR, char>
<ID, toProve>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, To prove 	>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<CHAR, char>
<ID, another>
<ASSIGNOP, =>
<CHAR, char>
<ID, lonbgstring>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING, NEwlinw = 
, tab = 	, space =  , whatelse>
<SEMICOLON, ;>
<CHAR, char>
<ID, special>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<SINGLE LINE STRING,  slash / backslash \ quotes ' doublequote " >
<SEMICOLON, ;>
<CHAR, char>
<ID, navid>
<ASSIGNOP, =>
<ID, dey>
<ID, na>
<INT, int>
<ID, n>
<ASSIGNOP, =>
<CONST_INT, 5>
<SEMICOLON, ;>
<ID, n>
<ASSIGNOP, =>
<ID, n>
<ADDOP, +>
<CONST_INT, 9>
<ADDOP, ->
<CONST_INT, 8>
<SEMICOLON, ;>
<ID, n>
<ASSIGNOP, =>
<ID, n>
<MULOP, />
<CONST_INT, 2>
<MULOP, *>
<CONST_INT, 9>
<MULOP, %>
<CONST_INT, 67>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, n>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, CT!!!!!!!!!!>
<RPAREN, )>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, n>
<RELOP, >>
<CONST_INT, 6>
<LOGICOP, &&>
<ID, n>
<RELOP, <=>
<CONST_INT, 4>
<LOGICOP, ||>
<ID, n>
<RELOP, !=>
<CONST_INT, 64>
<LOGICOP, &&>
<ID, n>
<RELOP, ==>
<CONST_INT, 8>
<RPAREN, )>
<CONTINUE, continue>
<SEMICOLON, ;>
<ELSE, else>
<BREAK, break>
<SEMICOLON, ;>
<ID, n>
<INCOP, -->
<SEMICOLON, ;>
<ID, n>
<ASSIGNOP, =>
<NOT, !>
<ID, n>
<SEMICOLON, ;>
<ID, n>
<ASSIGNOP, =>
<ID, n>
<BITOP, &>
<CONST_INT, 8>
<SEMICOLON, ;>
<ID, n>
<ASSIGNOP, =>
<ID, n>
<BITOP, |>
<LPAREN, (>
<CONST_INT, 3>
<BITOP, ^>
<CONST_INT, 1>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<SWITCH, switch>
<LPAREN, (>
<ID, n>
<RPAREN, )>
<LCURL, {>
<CASE, case>
<CONST_INT, 1>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Helllo1>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<CASE, case>
<CONST_INT, 6>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, 6
>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<DEFAULT, default>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Nothin	g>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<DO, do>
<LCURL, {>
<ID, nothing>
<SEMICOLON, ;>
<INT, int>
<ID, h>
<ASSIGNOP, =>
<CONST_INT, 1>
<BITOP, <<>
<CONST_INT, 2>
<SEMICOLON, ;>
<RCURL, }>
<WHILE, while>
<LPAREN, (>
<ID, n>
<RELOP, ==>
<CONST_INT, 6>
<RPAREN, )>
<INT, int>
<ID, g>
<ASSIGNOP, =>
<CONST_FLOAT, 1E43>
<SEMICOLON, ;>
<FLOAT, float>
<ID, t>
<ASSIGNOP, =>
<SEMICOLON, ;>
<FLOAT, float>
<ID, b>
<ASSIGNOP, =>
<SEMICOLON, ;>
<RETURN, return>
<SEMICOLON, ;>
<RCURL, }>
<ID, E38>
